//------------------------------------------------------------------------------
// <auto-generated>
//    Este código se generó a partir de una plantilla.
//
//    Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//    Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AccesoDatos
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class BiologiaBdRelacionesEntities : DbContext
    {
        public BiologiaBdRelacionesEntities()
            : base("name=BiologiaBdRelacionesEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<amphibia> amphibias { get; set; }
        public DbSet<autor> autors { get; set; }
        public DbSet<autorbiografia> autorbiografias { get; set; }
        public DbSet<ave> aves { get; set; }
        public DbSet<biografia> biografias { get; set; }
        public DbSet<catalogo> catalogoes { get; set; }
        public DbSet<ColaReporte> ColaReportes { get; set; }
        public DbSet<divisiongeopolitica> divisiongeopoliticas { get; set; }
        public DbSet<divisiongeopoliticacatalogoap> divisiongeopoliticacatalogoaps { get; set; }
        public DbSet<enlacerelacionado> enlacerelacionadoes { get; set; }
        public DbSet<especie> especies { get; set; }
        public DbSet<especiecatalogo> especiecatalogoes { get; set; }
        public DbSet<especielocalidad> especielocalidads { get; set; }
        public DbSet<especiman> especimen { get; set; }
        public DbSet<ImagenEspeciman> ImagenEspecimen { get; set; }
        public DbSet<localidad> localidads { get; set; }
        public DbSet<localidadcatalogo> localidadcatalogoes { get; set; }
        public DbSet<mammalia> mammalias { get; set; }
        public DbSet<MENU> MENUs { get; set; }
        public DbSet<multimedia> multimedias { get; set; }
        public DbSet<nombrecomun> nombrecomuns { get; set; }
        public DbSet<nombrecomuncatalogo> nombrecomuncatalogoes { get; set; }
        public DbSet<nombrecomunpublicacion> nombrecomunpublicacions { get; set; }
        public DbSet<ordenamientotaxa> ordenamientotaxas { get; set; }
        public DbSet<PERFIL> PERFILs { get; set; }
        public DbSet<PERMISOSPERFIL> PERMISOSPERFILs { get; set; }
        public DbSet<publicacion> publicacions { get; set; }
        public DbSet<publicacionano_bak> publicacionano_bak { get; set; }
        public DbSet<publicacionautor> publicacionautors { get; set; }
        public DbSet<publicacioncatalogo> publicacioncatalogoes { get; set; }
        public DbSet<publicacionenlace> publicacionenlaces { get; set; }
        public DbSet<reptilia> reptilias { get; set; }
        public DbSet<reptiliacatalogo> reptiliacatalogoes { get; set; }
        public DbSet<sinonimo> sinonimoes { get; set; }
        public DbSet<sysdiagram> sysdiagrams { get; set; }
        public DbSet<taxa> taxas { get; set; }
        public DbSet<taxaaudio> taxaaudios { get; set; }
        public DbSet<taxapublicacion> taxapublicacions { get; set; }
        public DbSet<taxavideo> taxavideos { get; set; }
        public DbSet<tipo> tipoes { get; set; }
        public DbSet<tipocatalogo> tipocatalogoes { get; set; }
        public DbSet<USUARIO> USUARIOs { get; set; }
        public DbSet<verificacionlocalidad> verificacionlocalidads { get; set; }
    
        public virtual ObjectResult<SeleccionarTaxaEspeciePorIdTaxa_Result> SeleccionarTaxaEspeciePorIdTaxa(Nullable<long> iIdTaxa)
        {
            var iIdTaxaParameter = iIdTaxa.HasValue ?
                new ObjectParameter("iIdTaxa", iIdTaxa) :
                new ObjectParameter("iIdTaxa", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SeleccionarTaxaEspeciePorIdTaxa_Result>("SeleccionarTaxaEspeciePorIdTaxa", iIdTaxaParameter);
        }
    
        public virtual ObjectResult<SeleccionarTaxaEspeciePorIdTaxaSP_Result> SeleccionarTaxaEspeciePorIdTaxaSP(Nullable<long> iIdTaxa)
        {
            var iIdTaxaParameter = iIdTaxa.HasValue ?
                new ObjectParameter("iIdTaxa", iIdTaxa) :
                new ObjectParameter("iIdTaxa", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SeleccionarTaxaEspeciePorIdTaxaSP_Result>("SeleccionarTaxaEspeciePorIdTaxaSP", iIdTaxaParameter);
        }
    
        public virtual ObjectResult<SeleccionarTaxaEspeciePorIdTaxaSPFinal_Result> SeleccionarTaxaEspeciePorIdTaxaSPFinal(Nullable<long> iIdTaxa)
        {
            var iIdTaxaParameter = iIdTaxa.HasValue ?
                new ObjectParameter("iIdTaxa", iIdTaxa) :
                new ObjectParameter("iIdTaxa", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SeleccionarTaxaEspeciePorIdTaxaSPFinal_Result>("SeleccionarTaxaEspeciePorIdTaxaSPFinal", iIdTaxaParameter);
        }
    
        public virtual ObjectResult<SeleccionarTaxaEspeciePorIdTaxaSPFinalFinal_Result> SeleccionarTaxaEspeciePorIdTaxaSPFinalFinal(Nullable<long> iIdTaxa)
        {
            var iIdTaxaParameter = iIdTaxa.HasValue ?
                new ObjectParameter("iIdTaxa", iIdTaxa) :
                new ObjectParameter("iIdTaxa", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SeleccionarTaxaEspeciePorIdTaxaSPFinalFinal_Result>("SeleccionarTaxaEspeciePorIdTaxaSPFinalFinal", iIdTaxaParameter);
        }
    
        public virtual ObjectResult<SeleccionarTaxaEspeciePorIdTaxaSPSP_Result> SeleccionarTaxaEspeciePorIdTaxaSPSP(Nullable<long> iIdTaxa)
        {
            var iIdTaxaParameter = iIdTaxa.HasValue ?
                new ObjectParameter("iIdTaxa", iIdTaxa) :
                new ObjectParameter("iIdTaxa", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SeleccionarTaxaEspeciePorIdTaxaSPSP_Result>("SeleccionarTaxaEspeciePorIdTaxaSPSP", iIdTaxaParameter);
        }
    
        public virtual ObjectResult<SeleccionarTaxaPorId_Result> SeleccionarTaxaPorId(Nullable<long> iIdTaxa)
        {
            var iIdTaxaParameter = iIdTaxa.HasValue ?
                new ObjectParameter("iIdTaxa", iIdTaxa) :
                new ObjectParameter("iIdTaxa", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SeleccionarTaxaPorId_Result>("SeleccionarTaxaPorId", iIdTaxaParameter);
        }
    
        public virtual ObjectResult<SeleccionarTaxas_Result> SeleccionarTaxas()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SeleccionarTaxas_Result>("SeleccionarTaxas");
        }
    
        public virtual ObjectResult<SeleccionarTaxasAmphibiaSP_Result> SeleccionarTaxasAmphibiaSP()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SeleccionarTaxasAmphibiaSP_Result>("SeleccionarTaxasAmphibiaSP");
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    }
}
